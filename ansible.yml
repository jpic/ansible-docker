---

- name: Send deployment start slack message
  when: slack_token is defined and project_slack_channel
  tags: update
  slack:
    token: '{{ project_slack_token }}'
    username: Playlabs
    icon_url: '{{ project_slack_icon }}'
    color: warning
    channel: '{{ project_slack_channel }}'
    parse: full
    msg: |
      {{ project_instance }}: {{ lookup("env", "GITLAB_USER_LOGIN") }} deploying {{ project_image }} on {{ project_dns }}
      {{ lookup("env", "CI_JOB_URL") }}
      {{ lookup("env", "CI_COMMIT_SHA") }}
      {{ lookup("env", "CI_COMMIT_MESSAGE") }}

- name: Get image USER uuid
  shell: sudo /usr/bin/docker run {{ project_image }} id -u
  tags: update
  register: project_image_uuid_shell
  changed_when: false

- name: Get plugins from image variables
  set_fact:
    project_plugins: "{{ project_image_env.get('PLAYLABS_PLUGINS', '').split(',') }}"
  tags: update
  when: project_plugins == [] and 'PLAYLABS_PLUGINS' in project_image_env

- name: Create postgres container
  register: project_postgres_container
  docker_container:
    name: '{{ project_postgres_host }}'
    networks:
    - name: '{{ project_instance }}'
    image: postgres:10
    restart_policy: always
    log_driver: journald
    volumes:
    - '{{ project_postgres_data_home }}:{{ project_postgres_data_mount }}'
    - '{{ project_postgres_run_home }}:{{ project_postgres_run_mount }}'
    - '{{ project_backup_home }}:{{ project_backup_mount }}'
    env:
      POSTGRES_PASSWORD: '{{ project_postgres_password }}'
      POSTGRES_USER: '{{ project_postgres_user }}'
      POSTGRES_DB: '{{ project_postgres_db }}'

- name: Wait for postgres to be up
  wait_for:
    host: "{{ project_postgres_container['ansible_facts']['docker_container']['NetworkSettings']['IPAddress'] }}"
    port: 5432
    state: started
